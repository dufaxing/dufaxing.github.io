---
layout: post
title:  "基于NRF24L02的无线通信-研电赛[4]"
date:   2019-7-3 00:00:00
categories: 研电赛
tags: 单片机
excerpt: 为了让无线充电桩更加节能，考虑只让机器人到达无线充电区域后，才开启高频逆变。所以在设计本系统时，加入了一对射频收发模块NRF24L01完成无线通信功能。
mathjax: true
---
* content
{:toc}
---


> nRF24.L01是一款新型单片射频收发器件，工作于2.4 GHz～2.5 GHz ISM频段。内置频率合成器、功率放大器、晶体振荡器、调制器等功能模块，并融合了增强型ShockBurst技术，其中输出功率和通信频道可通过程序进行配置。nRF24L01功耗低，在以-6 dBm的功率发射时，工作电流也只有9 mA;接收时，工作电流只有12.3 mA，多种低功率工作模式（掉电模式和空闲模式）使节能设计更方便。


### 引脚配置

把STM32F103C8Tx单片机的SPI1配置为全双工模式，并且NRF24L01采用SPI通讯协议，最大速率为10M，所以单片机的SPI波特率配置不能超过10M，在这里我配置分频后波特率我4.5M。

![ZBEhad.png](https://s2.ax1x.com/2019/07/07/ZBEhad.png)

---

### 接收端



#### 接收端配置


```
#ifndef DEV_SPI_H
#define DEV_SPI_H



#include "spi.h"



#define uchar unsigned char

/*******************************NRF24L01接口定义*********************************/
#define hspi_NRF24L01 hspi1

#define NRF24L01_SPI_CS_CLK_ENABLE()                  __HAL_RCC_GPIOA_CLK_ENABLE()
#define NRF24L01_SPI_CS_PORT                          GPIOA
#define NRF24L01_SPI_CS_PIN                           GPIO_PIN_4
#define NRF24L01_SPI_CS_ENABLE()                      HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_RESET)
#define NRF24L01_SPI_CS_DISABLE()                     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET)

#define NRF24L01_CE_CLK_ENABLE()                      __HAL_RCC_GPIOA_CLK_ENABLE()    
#define NRF24L01_CE_PORT                              GPIOA
#define NRF24L01_CE_PIN                               GPIO_PIN_3
#define NRF24L01_CE_LOW()                             HAL_GPIO_WritePin(NRF24L01_CE_PORT, NRF24L01_CE_PIN, GPIO_PIN_RESET)
#define NRF24L01_CE_HIGH()                            HAL_GPIO_WritePin(NRF24L01_CE_PORT, NRF24L01_CE_PIN, GPIO_PIN_SET)

#define NRF24L01_IRQ_CLK_ENABLE()                     __HAL_RCC_GPIOA_CLK_ENABLE()    
#define NRF24L01_IRQ_PORT                             GPIOA
#define NRF24L01_IRQ_PIN                              GPIO_PIN_2
#define NRF24L01_IRQ_PIN_READ()                       HAL_GPIO_ReadPin(NRF24L01_IRQ_PORT,NRF24L01_IRQ_PIN)

/*******************************NRF24L01寄存器定义*********************************/
//NRF24L01寄存器操作命令
#define NRF_READ_REG    0x00  //读配置寄存器,低5位为寄存器地址
#define NRF_WRITE_REG   0x20  //写配置寄存器,低5位为寄存器地址
#define RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
#define WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
#define FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
#define FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
#define REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
#define NOP             0xFF  //空操作,可以用来读状态寄存器         
//SPI(NRF24L01)寄存器地址
#define CONFIG          0x00  //配置寄存器地址;bit0:1接收模式,0发射模式;bit1:电选择;bit2:CRC模式;bit3:CRC使能;
                              //bit4:中断MAX_RT(达到最大重发次数中断)使能;bit5:中断TX_DS使能;bit6:中断RX_DR使能
#define EN_AA           0x01  //使能自动应答功能  bit0~5,对应通道0~5
#define EN_RXADDR       0x02  //接收地址允许,bit0~5,对应通道0~5
#define SETUP_AW        0x03  //设置地址宽度(所有数据通道):bit1,0:00,3字节;01,4字节;02,5字节;
#define SETUP_RETR      0x04  //建立自动重发;bit3:0,自动重发计数器;bit7:4,自动重发延时 250*x+86us
#define RF_CH           0x05  //RF通道,bit6:0,工作通道频率;
#define RF_SETUP        0x06  //RF寄存器;bit3:传输速率(0:1Mbps,1:2Mbps);bit2:1,发射功率;bit0:低噪声放大器增益
#define STATUS          0x07  //状态寄存器;bit0:TX FIFO满标志;bit3:1,接收数据通道号(最大:6);bit4,达到最多次重发
                              //bit5:数据发送完成中断;bit6:接收数据中断;
#define MAX_TX                      0x10  //达到最大发送次数中断
#define TX_OK                       0x20  //TX发送完成中断
#define RX_OK                       0x40  //接收到数据中断

#define OBSERVE_TX      0x08  //发送检测寄存器,bit7:4,数据包丢失计数器;bit3:0,重发计数器
#define CD              0x09  //载波检测寄存器,bit0,载波检测;
#define RX_ADDR_P0      0x0A  //数据通道0接收地址,最大长度5个字节,低字节在前
#define RX_ADDR_P1      0x0B  //数据通道1接收地址,最大长度5个字节,低字节在前
#define RX_ADDR_P2      0x0C  //数据通道2接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P3      0x0D  //数据通道3接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P4      0x0E  //数据通道4接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P5      0x0F  //数据通道5接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define TX_ADDR         0x10  //发送地址(低字节在前),ShockBurstTM模式下,RX_ADDR_P0与此地址相等
#define RX_PW_P0        0x11  //接收数据通道0有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P1        0x12  //接收数据通道1有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P2        0x13  //接收数据通道2有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P3        0x14  //接收数据通道3有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P4        0x15  //接收数据通道4有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P5        0x16  //接收数据通道5有效数据宽度(1~32字节),设置为0则非法
#define NRF_FIFO_STATUS 0x17  //FIFO状态寄存器;bit0,RX FIFO寄存器空标志;bit1,RX FIFO满标志;bit2,3,保留
                              //bit4,TX FIFO空标志;bit5,TX FIFO满标志;bit6,1,循环发送上一数据包.0,不循环;

/*******************************NRF24L01数据宽度*********************************/
// NRF24L01发送接收数据宽度定义
#define TX_ADR_WIDTH                                  5           //5字节的地址宽度
#define RX_ADR_WIDTH                                  5           //5字节的地址宽度
#define TX_PLOAD_WIDTH                                32          //32字节的用户数据宽度
#define RX_PLOAD_WIDTH                                32          //32字节的用户数据宽度





/*******************************程序接口*********************************/
void NRF24L01_RX_Mode(void);                                        //配置为接收模式
void NRF24L01_TX_Mode(void);                                        //配置为发送模式
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len);
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len);
uint8_t NRF24L01_Check(void);
void NRF24L01_TX_Mode(void);
void NRF24L01_RX_Mode(void);
uint8_t NRF24L01_TxPacket(uint8_t *txbuf);
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf);
/*********************************END************************************/




#endif
```


#### 接收端功能函数


```
#ifndef DEV_SPI_C
#define DEV_SPI_C


#include "dev_spi.h"
#include <string.h>

/*******************************组件接口*********************************/

/*******************************全局定义*********************************/
const uint8_t TX_ADDRESS[TX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01}; //发送地址
const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01};

/*********************************END************************************/

//#define _TX_MODE_
#define _RX_MODE_



uint8_t rx_tmp_buf[33];
uint8_t tx_tmp_buf[33]="aaaaa";
uint8_t tx_tmp_buf_1[33]="aaaaa";
uint8_t tx_tmp_buf_2[33]="aaaaa";
uint8_t tx_tmp_buf_3[33]="aaaaa";



uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
    uint8_t d_read,d_send=byte;
    if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK) {
        d_read=0xFF;
    }
    return d_read;
}

uint8_t NRF24L01_Check(void)
{
    uint8_t buf[5]= {0XA5,0XA5,0XA5,0XA5,0XA5};
    uint8_t i;
    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
    NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
    for(i=0; i<5; i++) {
        if(buf[i]!=0XA5) {
            break;
        }
    }
    if(i!=5)return 1;//检测24L01错误
    return 0;                 //检测到24L01
}

uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
    uint8_t status;
    NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
    status =SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器号
    SPIx_ReadWriteByte(&hspi_NRF24L01,value);      //写入寄存器的值
    NRF24L01_SPI_CS_DISABLE();                 //禁止SPI传输
    return(status);                               //返回状态值
}

uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
    uint8_t reg_val;
    NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
    SPIx_ReadWriteByte(&hspi_NRF24L01,reg);   //发送寄存器号
    reg_val=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读取寄存器内容
    NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
    return(reg_val);           //返回状态值
}

uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
    uint8_t status,uint8_t_ctr;

    NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
    status=SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
    for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++) {
        pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读出数据
    }
    NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
    return status;        //返回读到的状态值
}

uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
    uint8_t status,uint8_t_ctr;
    NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
    status = SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
    for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++) {
        SPIx_ReadWriteByte(&hspi_NRF24L01,*pBuf++); //写入数据
    }
    NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
    return status;          //返回读到的状态值
}

uint8_t NRF24L01_TxPacket(uint8_t *txbuf)
{
    uint8_t sta;
    NRF24L01_CE_LOW();
    NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
    NRF24L01_CE_HIGH();//启动发送

    while(NRF24L01_IRQ_PIN_READ()!=0);//等待发送完成

    sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
    if(sta&MAX_TX) { //达到最大重发次数
        NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器
        return MAX_TX;
    }
    if(sta&TX_OK) { //发送完成
        return TX_OK;
    }
    return 0xff;//其他原因发送失败
}

uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
    uint8_t sta;
    sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
    if(sta&RX_OK) { //接收到数据
        NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
        NRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器
        return 0;
    }
    return 1;//没收到任何数据
}


void NRF24L01_RX_Mode(void)
{
    NRF24L01_CE_LOW();
    NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答
    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);             //设置RF通信频率
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启

    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度

    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址


    NRF24L01_CE_HIGH(); //CE为高,进入接收模式
    HAL_Delay(1);
}

void NRF24L01_TX_Mode(void)
{
    NRF24L01_CE_LOW();
    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK

    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
    NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
    NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
    NRF24L01_CE_HIGH();//CE为高,10us后启动发送
    HAL_Delay(1);
}

#endif
```

#### 启动接收

```
int main(void)
{
    /* USER CODE BEGIN 1 */
    
    /* USER CODE END 1 */
    
    /* MCU Configuration--------------------------------------------------------*/
    
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
    
    /* USER CODE BEGIN Init */
    
    /* USER CODE END Init */
    
    /* Configure the system clock */
    SystemClock_Config();
    
    /* USER CODE BEGIN SysInit */
    
    /* USER CODE END SysInit */
    
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_SPI1_Init();
    MX_ADC1_Init();
    MX_ADC2_Init();
    MX_TIM1_Init();
    /* USER CODE BEGIN 2 */
    
    HAL_Delay(5);
    while(NRF24L01_Check() == 1) ;
    NRF24L01_RX_Mode();
    const char* rec_string = "aaaaa";
    unsigned char flag = 0;
    /* USER CODE END 2 */
    
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
#if 1
        
      
        while(1) {
            HAL_Delay(5);
            if (NRF24L01_RxPacket(rx_tmp_buf)==0) {
                if (strstr(rec_string,rx_tmp_buf)) {
                    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
                    flag = 1;
                    break;
                }
            }
        }

        if(flag) {
            HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
            HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
            HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
            HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
            
        }
        while(1);
#endif 
        
        
        /* USER CODE END WHILE */
        
        /* USER CODE BEGIN 3 */
    }
    /* USER CODE END 3 */
}
```


---

### 发送端


#### 发送端配置


```
#ifndef DEV_SPI_H
#define DEV_SPI_H

#include "system.h"

#include "spi.h"
#include "main.h"
#include "utility.h"
#include "dev_gpio.h"


#define uchar unsigned char

/*******************************NRF24L01接口定义*********************************/
#define hspi_NRF24L01 hspi1

#define NRF24L01_SPI_CS_CLK_ENABLE()                  __HAL_RCC_GPIOF_CLK_ENABLE()
#define NRF24L01_SPI_CS_PORT                          GPIOA
#define NRF24L01_SPI_CS_PIN                           GPIO_PIN_4
#define NRF24L01_SPI_CS_ENABLE()                      HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_RESET)
#define NRF24L01_SPI_CS_DISABLE()                     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET)

#define NRF24L01_CE_CLK_ENABLE()                      __HAL_RCC_GPIOF_CLK_ENABLE()    
#define NRF24L01_CE_PORT                              GPIOB
#define NRF24L01_CE_PIN                               GPIO_PIN_13
#define NRF24L01_CE_LOW()                             HAL_GPIO_WritePin(NRF24L01_CE_PORT, NRF24L01_CE_PIN, GPIO_PIN_RESET)
#define NRF24L01_CE_HIGH()                            HAL_GPIO_WritePin(NRF24L01_CE_PORT, NRF24L01_CE_PIN, GPIO_PIN_SET)

#define NRF24L01_IRQ_CLK_ENABLE()                     __HAL_RCC_GPIOF_CLK_ENABLE()    
#define NRF24L01_IRQ_PORT                             GPIOB
#define NRF24L01_IRQ_PIN                              GPIO_PIN_12
#define NRF24L01_IRQ_PIN_READ()                       HAL_GPIO_ReadPin(NRF24L01_IRQ_PORT,NRF24L01_IRQ_PIN)

/*******************************NRF24L01寄存器定义*********************************/
//NRF24L01寄存器操作命令
#define NRF_READ_REG    0x00  //读配置寄存器,低5位为寄存器地址
#define NRF_WRITE_REG   0x20  //写配置寄存器,低5位为寄存器地址
#define RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
#define WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
#define FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
#define FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
#define REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
#define NOP             0xFF  //空操作,可以用来读状态寄存器         
//SPI(NRF24L01)寄存器地址
#define CONFIG          0x00  //配置寄存器地址;bit0:1接收模式,0发射模式;bit1:电选择;bit2:CRC模式;bit3:CRC使能;
                              //bit4:中断MAX_RT(达到最大重发次数中断)使能;bit5:中断TX_DS使能;bit6:中断RX_DR使能
#define EN_AA           0x01  //使能自动应答功能  bit0~5,对应通道0~5
#define EN_RXADDR       0x02  //接收地址允许,bit0~5,对应通道0~5
#define SETUP_AW        0x03  //设置地址宽度(所有数据通道):bit1,0:00,3字节;01,4字节;02,5字节;
#define SETUP_RETR      0x04  //建立自动重发;bit3:0,自动重发计数器;bit7:4,自动重发延时 250*x+86us
#define RF_CH           0x05  //RF通道,bit6:0,工作通道频率;
#define RF_SETUP        0x06  //RF寄存器;bit3:传输速率(0:1Mbps,1:2Mbps);bit2:1,发射功率;bit0:低噪声放大器增益
#define STATUS          0x07  //状态寄存器;bit0:TX FIFO满标志;bit3:1,接收数据通道号(最大:6);bit4,达到最多次重发
                              //bit5:数据发送完成中断;bit6:接收数据中断;
#define MAX_TX                      0x10  //达到最大发送次数中断
#define TX_OK                       0x20  //TX发送完成中断
#define RX_OK                       0x40  //接收到数据中断

#define OBSERVE_TX      0x08  //发送检测寄存器,bit7:4,数据包丢失计数器;bit3:0,重发计数器
#define CD              0x09  //载波检测寄存器,bit0,载波检测;
#define RX_ADDR_P0      0x0A  //数据通道0接收地址,最大长度5个字节,低字节在前
#define RX_ADDR_P1      0x0B  //数据通道1接收地址,最大长度5个字节,低字节在前
#define RX_ADDR_P2      0x0C  //数据通道2接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P3      0x0D  //数据通道3接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P4      0x0E  //数据通道4接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define RX_ADDR_P5      0x0F  //数据通道5接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;
#define TX_ADDR         0x10  //发送地址(低字节在前),ShockBurstTM模式下,RX_ADDR_P0与此地址相等
#define RX_PW_P0        0x11  //接收数据通道0有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P1        0x12  //接收数据通道1有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P2        0x13  //接收数据通道2有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P3        0x14  //接收数据通道3有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P4        0x15  //接收数据通道4有效数据宽度(1~32字节),设置为0则非法
#define RX_PW_P5        0x16  //接收数据通道5有效数据宽度(1~32字节),设置为0则非法
#define NRF_FIFO_STATUS 0x17  //FIFO状态寄存器;bit0,RX FIFO寄存器空标志;bit1,RX FIFO满标志;bit2,3,保留
                              //bit4,TX FIFO空标志;bit5,TX FIFO满标志;bit6,1,循环发送上一数据包.0,不循环;

/*******************************NRF24L01数据宽度*********************************/
// NRF24L01发送接收数据宽度定义
#define TX_ADR_WIDTH                                  5           //5字节的地址宽度
#define RX_ADR_WIDTH                                  5           //5字节的地址宽度
#define TX_PLOAD_WIDTH                                32          //32字节的用户数据宽度
#define RX_PLOAD_WIDTH                                32          //32字节的用户数据宽度


const uint8_t TX_ADDRESS[TX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01}; //发送地址
const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01};


/*******************************程序接口*********************************/
void NRF24L01_RX_Mode(void);                                        //配置为接收模式
void NRF24L01_TX_Mode(void);                                        //配置为发送模式
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len);
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len);
uint8_t NRF24L01_Check(void);
void NRF24L01_TX_Mode(void);
void NRF24L01_RX_Mode(void);
uint8_t NRF24L01_TxPacket(uint8_t *txbuf);
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf);
/*********************************END************************************/




#endif
```

#### 发送端功能函数


```
#ifndef DEV_SPI_C
#define DEV_SPI_C


#include "dev_spi.h"


/*******************************组件接口*********************************/
void    Dev_Spi_Init(void);
void    Dev_Spi_Start(void);
void    Dev_Spi_Message(MSG_E msg,unsigned long para1,unsigned long para2);
void    Dev_Spi_Process(void);

/*******************************全局定义*********************************/
const SYS_ENTRY_S   g_stDevEntry_Spi = {"DEV","SPI",Dev_Spi_Init,Dev_Spi_Start,Dev_Spi_Message,Dev_Spi_Process};

/*********************************END************************************/
extern char g_uart_flag;
#define _TX_MODE_
//#define _RX_MODE_

void Dev_Spi_Init(void)
{
    MX_SPI1_Init();
    return;
}
void Dev_Spi_Start(void)
{
    HAL_GPIO_WritePin(SPI_NSS_Port,SPI_NSS_Pin,GPIO_PIN_RESET);//SPI_NSS --> PA4
    return;
}


static UCHAR delay_1s_flag = 0;
uint8_t rx_tmp_buf[33];

uint8_t tx_tmp_buf[33]="aaaaa";
uint8_t tx_tmp_buf_1[33]="bbbbb";

void Dev_Spi_Message(MSG_E msg,unsigned long para1,unsigned long para2)
{
    if(!MSG_IsValid(msg)) {
        return;
    }
    
    switch(msg) {
    case MSG_Tim_1s:
        if (delay_1s_flag != 2) {
            delay_1s_flag = 1;
        } else if (delay_1s_flag == 2) {
            //NRF24L01_TxPacket(tx_tmp_buf);
#if 1 //#ifdef _TX_MODE_
            if (g_uart_flag == 1) {
                NRF24L01_TxPacket(tx_tmp_buf);
            }
            if (g_uart_flag == 2) {
                NRF24L01_TxPacket(tx_tmp_buf_1);
            }
           
#endif
        }
        break;
    case MSG_Tim_100ms:

        break;
    case MSG_Tim_1ms:

        break;
    default:
        break;
    }
    return;
}
void Dev_Spi_Process(void)
{
    if (delay_1s_flag == 1) {
        if (NRF24L01_Check() == 0) {
            delay_1s_flag = 2;
        } else {
            delay_1s_flag = 0;
            return;
        }
    }
    if (delay_1s_flag == 2) {
#ifdef _RX_MODE_
        NRF24L01_RX_Mode();
        if (NRF24L01_RxPacket(rx_tmp_buf)==0) {
            Dev_Uart1_Tx("RX_OK");
        }
#endif

#ifdef _TX_MODE_
        NRF24L01_TX_Mode();
#endif
    }


    return;
}

uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
    uint8_t d_read,d_send=byte;
    if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK) {
        d_read=0xFF;
    }
    return d_read;
}

uint8_t NRF24L01_Check(void)
{
    uint8_t buf[5]= {0XA5,0XA5,0XA5,0XA5,0XA5};
    uint8_t i;
    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
    NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
    for(i=0; i<5; i++) {
        if(buf[i]!=0XA5) {
            break;
        }
    }
    if(i!=5)return 1;//检测24L01错误
    return 0;                 //检测到24L01
}

uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
    uint8_t status;
    NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
    status =SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器号
    SPIx_ReadWriteByte(&hspi_NRF24L01,value);      //写入寄存器的值
    NRF24L01_SPI_CS_DISABLE();                 //禁止SPI传输
    return(status);                               //返回状态值
}

uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
    uint8_t reg_val;
    NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
    SPIx_ReadWriteByte(&hspi_NRF24L01,reg);   //发送寄存器号
    reg_val=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读取寄存器内容
    NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
    return(reg_val);           //返回状态值
}

uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
    uint8_t status,uint8_t_ctr;

    NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
    status=SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
    for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++) {
        pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读出数据
    }
    NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
    return status;        //返回读到的状态值
}

uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
    uint8_t status,uint8_t_ctr;
    NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
    status = SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值
    for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++) {
        SPIx_ReadWriteByte(&hspi_NRF24L01,*pBuf++); //写入数据
    }
    NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
    return status;          //返回读到的状态值
}

uint8_t NRF24L01_TxPacket(uint8_t *txbuf)
{
    uint8_t sta;
    NRF24L01_CE_LOW();
    NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
    NRF24L01_CE_HIGH();//启动发送

    while(NRF24L01_IRQ_PIN_READ()!=0);//等待发送完成

    sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
    if(sta&MAX_TX) { //达到最大重发次数
        NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器
        return MAX_TX;
    }
    if(sta&TX_OK) { //发送完成
        return TX_OK;
    }
    return 0xff;//其他原因发送失败
}

uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
    uint8_t sta;
    sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
    if(sta&RX_OK) { //接收到数据
        NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
        NRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器
        return 0;
    }
    return 1;//没收到任何数据
}


void NRF24L01_RX_Mode(void)
{
    NRF24L01_CE_LOW();
    NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答
    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);             //设置RF通信频率
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启

    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度

    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址


    NRF24L01_CE_HIGH(); //CE为高,进入接收模式
    HAL_Delay(1);
}

void NRF24L01_TX_Mode(void)
{
    NRF24L01_CE_LOW();
    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK

    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
    NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
    NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
    NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
    NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
    NRF24L01_CE_HIGH();//CE为高,10us后启动发送
    HAL_Delay(1);
}

#endif
```

---
