---
layout: post
title:  "CPP基础与提高Day1"
date:   2018-1-1 00:00:00
categories: C++
tags: C++
excerpt: 新年要有新气象，重新学习一遍C++。
mathjax: true
---
* content
{:toc}
---

> C++对C 的扩展(Externsion).曾有人戏谑的说，C++作为一种面向对象的语言，名字起的不好，为什么呢？用c 的
语法来看，++ 操作符是post ++ 。

## 2.1.类型增强:

### 2.1.1.类型检查更严格

比如，把一个const 类型的指针赋给非const 类型的指针。c 语言中可以通的过，但是
在c++中则编不过去。<br/>
```
int main()
{
    const int a = 100;
    int b = a;
    const int *pa = &a;
    int *pb = pa;
    return 0;
}
```

### 2.1.2.布尔类型（bool）

c 语言的逻辑真假用0 和非0 来表示。而c++中有了具体的类型。<br/>
```
int main()
{
    bool flag = true;
    if(flag != false) {
        printf("i know bool type now\n");
    }
    printf("bool size = %d\n",sizeof(bool));
    return 0;
}
```

### 2.1.3.真正的枚举(enum)
c 语言中枚举本质就是整型，枚举变量可以用任意整型赋值。而c++中枚举变量，只能
用被枚举出来的元素初始化。<br/>
```
enum season {SPR,SUM,AUT,WIN};
int main()
{
    enum season s = SPR;
    s = 0;//error!!!
    return 0;
}
```

### 2.1.4. 表达式的值可被赋值
c 语言中表达式通常不能作为左值的，即不可被赋值，c++中某些表达式是可以赋值的。
比如：<br/>
```
#include <iostream>
using namespace std;
int main(void)
{
    int a,b = 5;
    (a = b) = 10;
    cout<<"a = "<<a<<" b = "<<b<<endl;
    (a<b? a:b) = 200;
    cout<<"a = "<<a<<" b = "<<b<<endl;
    return 0;
}
```
---

## 2.2.输入与输出(cin /cout)

- 第一个真正意义上的c++程序，c++程序的后缀名为cpp。假设程序名叫xxx 则应该写
成xxx.cpp。<br/>

### 2.2.1.cin && cout

cin 和cout 是C++的标准输入流和输出流。他们在头文件iostream 中定义。<br/>

|流名    |含义    |隐含设备|流名    |含义    |隐含设备|
|--------|--------|--------|--------|--------|--------|
|cin     |标准输入|键盘    |cerr    |标准错误|输出屏幕|
|cout    |标准输出|屏幕    |clog    |cerr缓冲|输出屏幕|

```
int main()
{
    char name[30];
    int age;
    cout<<"pls input name and age:"<<endl;
    cin>>name;
    cin>>age;
    // cin>>name>>age;
    cout<<"your name is: "<<name<<endl;
    cout<<"your age is: "<<age<<endl;
    return 0;
}
```

### 2.2.2.格式化

#### 2.2.2.1.设置域宽及位数

对于实型，cout 默认输出六位有效数据，setprecision(2) 可以设置有效位数，
setprecision(n)<<setiosflags(ios::fixed)合用，可以设置小数点右边的位数。<br/>

```
#include <iostream>
#include <iomanip>
using namespace std;
int main()
{
    printf("%c\n%d\n%f\n",'a',100,120.00);
    printf("%5c\n%5d\n%6.2f\n",'a',100,120.00);
    cout<<setw(5)<<'a'<<endl<<setw(5)<<100<<endl
    <<setprecision(2)<<setiosflags(ios::fixed)<<120.00<<endl;
    return 0;
}

#### 2.2.2.2.按进制输出

输出十进制，十六进制，八进制。默认输出十进制的数据。<br/>
```
int i = 123;
cout<<i<<endl;
cout<<dec<<i<<endl;
cout<<hex<<i<<endl;
cout<<oct<<i<<endl;
cout<<setbase(16)<<i<<endl;
```

#### 2.2.2.3.设置填充符

还可以设置域宽的同时，设置左右对齐及填充字符。<br/>
```
int main()
{
    cout<<setw(10)<<1234<<endl;
    cout<<setw(10)<<setfill('0')<<1234<<endl;
    cout<<setw(10)<<setfill('0')<<setiosflags(ios::left)<<1234<<endl;
    cout<<setw(10)<<setfill('-')<<setiosflags(ios::right)<<1234<<endl;
    return 0;
}
```

---

## 2.3.函数重载(function overload)



---
