---
layout: post
title:  "直接插入排序"
date:   2019-10-23 00:00:00
categories: 计算机基础
tags: C++
excerpt: 直接插入排序原理
mathjax: true
---
* content
{:toc}
---


> [博客地址](https://dufaxing.com){:target="_blank"}


### 算法思想

直接插入排序（Insertion Sort）序是一种简单的插入排序。

插入排序：每一趟将一个待排序的记录，按照其关键字的大小插入到有序队列的合适位置里，知道全部插入完成。 

动态效果示意图：

![KGyD9P.gif](https://s2.ax1x.com/2019/10/22/KGyD9P.gif)


以上的过程，其实就是典型的直接插入排序，每次将一个新数据插入到有序队列中的合适位置里。

很简单吧，接下来，我们要将这个算法转化为编程语言。

假设有一组无序序列 R0, R1, ... , RN-1。

(1) 我们先将这个序列中下标为 0 的元素视为元素个数为 1 的有序序列。

(2) 然后，我们要依次把 R1, R2, ... , RN-1 插入到这个有序序列中。所以，我们需要一个外部循环，从下标 1 扫描到 N-1 。

(3) 接下来描述插入过程。假设这是要将 Ri 插入到前面有序的序列中。由前面所述，我们可知，插入Ri时，前 i-1 个数肯定已经是有序了。

所以我们需要将Ri 和R0 ~ Ri-1 进行比较，确定要插入的合适位置。这就需要一个内部循环，我们一般是从后往前比较，即从下标 i-1 开始向 0 进行扫描。


---

### C++代码

```
#include <iostream>
#include <vector>

using namespace std;

vector<int> insertSort(vector<int> list)
{
    vector<int> result;
    if (list.empty()){
        return result;
    }
    result = list;
    // 第1个数肯定是有序的，从第2个数开始遍历，依次插入有序序列
    for (int i = 1; i < result.size(); i++){
        // 取出第i个数，和前i-1个数比较后，插入合适位置
        int temp = result[i];
        // 因为前i-1个数都是从小到大的有序序列，所以只要当前比较的数(list[j])比temp大，就把这个数后移一位
        int j = i - 1;
        for (j; j >= 0 && result[j] > temp; j--){
            result[j + 1] = result[j];
        }
        result[j + 1] = temp;
        cout << "第" <<i <<"趟排序:" ;
        for (int s = 0; s < result.size(); s++){
            cout << result[s] << " ";
        }
        cout << endl;
    }
    return result;
}

int main()
{
    int arr[] = { 6, 4, 8, 9, 2, 3, 1 };
    vector<int> test(arr, arr + sizeof(arr) / sizeof(arr[0]));
    cout << "排序前" << endl;
    for (int i = 0; i < test.size(); i++){
        cout << test[i] << " ";
    }
    cout << endl;
    vector<int> result;
    result = insertSort(test);
    cout << "排序后" << endl;
    for (int i = 0; i < result.size(); i++){
        cout << result[i] << " ";
    }
    cout << endl;
    system("pause");
}
```

![KG2e81.png](https://s2.ax1x.com/2019/10/22/KG2e81.png)


---

### 算法分析

- 1、直接插入排序的算法性能<br>

![KG2wqS.png](https://s2.ax1x.com/2019/10/22/KG2wqS.png)

- 2、时间复杂度<br>

当数据正序时，执行效率最好，每次插入都不用移动前面的元素，时间复杂度为O(N)。 

当数据反序时，执行效率最差，每次插入都要前面的元素后移，时间复杂度为O(N^2)。

所以，数据越接近正序，直接插入排序的算法性能越好。 

- 3、空间复杂度<br>

由直接插入排序算法可知，我们在排序过程中，需要一个临时变量存储要插入的值，所以空间复杂度为 1 。

- 4、算法稳定性<br>
直接插入排序的过程中，不需要改变相等数值元素的位置，所以它是稳定的算法。 

---
