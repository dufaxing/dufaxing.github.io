---
layout: post
title:  "《剑指Offer》第二章——面试需要的基础知识"
date:   2019-7-10 00:00:00
categories: 剑指Offer
tags: 笔试题
excerpt: 《剑指Offer》面试题
mathjax: true
---
* content
{:toc}
---


## 编程语言

### 面试题1：赋值运算符函数(C++)


> 题目：如下为类型CMyString的声明，请为改类型添加赋值运算符函数。<br/>
>
```
class CMyString
{
    public:
        CMyString(char* pData = nullptr);
        CMyString(const CMyString& str);
        ~CMyString(void);
    private:
        char* m_pData;
};
```




```
CMyString& CMyString::operator = (const CMyString& str)
{
    if(this == &str)
        return *this;

    delete []m_pData;
    m_pData = nullptr;

    m_pData = new char[strlen(str.m_pData) + 1];
    strcpy(m_pData, str.m_pData);

    return *this;
}

```


### 面试题2：实现Singleton模式 (C#)

> 题目：设计一个类，我们只能生成该类的一个实例。<br/>


- C#的语法中有一个函数能够确保只调用一次，那就是静态构造函数，我们可以利用C#的这个特性实现单例模式。<br/>


## 数据结构

### 面试题3：数组中重复的数字

> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。



```
class Solution {
public:
    // Parameters:
    //        numbers:     an array of integers
    //        length:      the length of array numbers
    //        duplication: (Output) the duplicated number in the array number
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    bool duplicate(int numbers[], int length, int* duplication) {
        if(numbers == nullptr || length <= 0) {
            return false;
        }
        for(int i=0; i < length;i++) {
            if(numbers[i] <0 || numbers[i] > (length -1 )) {
                return false;
            }
        }
        for(int i = 0; i < length;i++){
            while(numbers[i] != i) {
                if(numbers[i] == numbers[numbers[i]]) {
                    *duplication = numbers[i];
                    return true;
                }
                int temp = numbers[i];
                numbers[i] = numbers[temp];
                numbers[temp] = temp;
            }
        }
    }
};
```



### 1.二叉树的镜像


![Zcn0Ds.png](https://s2.ax1x.com/2019/07/10/Zcn0Ds.png)


```
/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/

/* 先前序遍历这棵树的每个结点，如果遍历到的结点有子结点，就交换它的两个子节点，
当交换完所有的非叶子结点的左右子结点之后，就得到了树的镜像 */

class Solution {
public:
    void Mirror(TreeNode *pRoot) {
        if(pRoot == NULL) {
            return;
        }
        if(pRoot->left == NULL && pRoot->right == NULL) {
            return;
        }
         
        TreeNode *pTemp = pRoot->left;
        pRoot->left = pRoot->right;
        pRoot->right = pTemp;
         
        if(pRoot->left != NULL) {
            Mirror(pRoot->left);
        }
        if(pRoot->right != NULL) {
            Mirror(pRoot->right);
        }
    }
};
```


---

### 标题2:




---

### 标题3:



---
