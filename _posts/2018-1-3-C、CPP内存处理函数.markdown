---
layout: post
title:  "C/C++中几个内存处理库函数"
date:   2018-1-3 00:00:00
categories: 嵌入式
tags: C语言
excerpt: 几个常用的内存处理库函数
mathjax: true
---
* content
{:toc}
---

### 1、malloc

`void *malloc(unsigned int num_bytes);`

malloc函数是一种分配长度为num_bytes字节的内存块的函数，可以向系统申请分配指定size个字节的内存空间。malloc的全称是memory allocation，中文叫动态内存分配，当无法知道内存具体位置的时候，想要绑定真正的内存空间，就需要用到动态的分配内存。**返回类型是 `void* `类型。`void* `表示未确定类型的指针。C,C++规定，void* 类型可以通过类型转换强制转换为任何其它类型的指针。**

- 头文件:`#include <stdlib.h>或者#include <malloc.h>`
- 函数声明:`void *malloc(size_t size);`<br/>
备注：`void* `表示未确定类型的指针，`void *`可以指向任何类型的数据，更明确的说是指申请内存空间时还不知道用户是用这段空间来存储什么类型的数据（比如是char还是int或者其他数据类型）。

---

### 2、free

- 头文件：`malloc.h或stdlib.h`

功 能: 与malloc()函数配对使用，释放malloc函数申请的动态内存。（另：对于free(p)这句语句，如果p 是NULL 指针，那么free 对p 无论操作多少次都不会出问题。如果p 不是NULL 指针，那么free 对p连续操作两次就会导致程序运行错误。）<br/>
用 法: `void free(void *ptr);`

- demo

```
#include <string.h>
#include <stdio.h>
#include <alloc.h> //or #include <malloc.h>
int main(void)
{
    char *str;
    /* allocate memory for string */
    str = (char *)malloc(10);
    /* copy "Hello" to string */
    strcpy(str, "Hello");
    /* display string */
    printf("String is %s\n", str);
    /* free memory */
    free(str);
    str=NULL；
    return 0;
}
```

---

### 3、memset

`void * memset ( void * ptr, int value, size_t num );`

- memset是以字节为单位，初始化内存块<br/>
- 头文件:`<memory.h>或<string.h>`
- 参数
 - ptr
       指向需要填充的内存块的指针。
 - value
       要设置的值，这个值是作为int型传递的，但是该函数用这个值的unsigned char类型转换值来填充内存块。
 - num
       要是指特定值的字节数。

- demo

当初始化**一个字节单位**的数组时，可以用memset把每个数组单元初始化成任何你想要的值

```
char data[10];  
memset(data, 1, sizeof(data));    // right  
memset(data, 0, sizeof(data));    // right  
```

而在初始化其他基础类型时，则需要注意，比如`int`类型，`sizeof(int) = 4;`

```
int data[10];  
memset(data, 0, sizeof(data));    // right  
memset(data, -1, sizeof(data));    // right  
memset(data, 1, sizeof(data));    // wrong, data[x] would be 0x0101 instead of 1 
```

---

### 4、memcpy

`void * memcpy ( void * destination, const void * source, size_t num );`

- 头文件：`<string.h>或<cstring>`
- 功能：复制内存块<br/>

从source指向的位置直接复制num个字节的值到destination指向的内存块。
对于这个函数，source和destination指向的对象的底层类型是无关的；结果是数据的一个二进制复制。
这个函数不检查任何结束空字符（null）—— 它总是准确地复制num个字节。<br/>
为了避免溢出，source和destination两个参数指向的数组的大小应该至少是num字节，并且不应该重叠（对于重叠内存块，memmove是一个更安全的方法)）。<br/>
- 参数:<br/>
 - destination<br/>
       指向内容被复制到的目的数组的指针，类型被转换为void*。<br/>
 - source<br/>
       指向复制数据的源数组的指针，类型被转换为void*。<br/>
 - num<br/>
       要复制的字节数。<br/>
 - 返回值<br/>
       返回目的指针destination。<br/>

- demo
```
/* memcpy example */  
#include <stdio.h>  
#include <string.h>  
int main ()  
{  
    char str1[]="Sample string";  
    char str2[40];  
    char str3[40];  
    memcpy (str2,str1,strlen(str1)+1);  
    memcpy (str3,"copy successful",16);  
    printf ("str1: %s\nstr2: %s\nstr3: %s\n",str1,str2,str3);
    return 0;  
}  
```
```
/*output*/
str1: Sample string  
str2: Sample string  
str3: copy successful
```
---

### 5、memmove

`void * memmove ( void * destination, const void * source, size_t num );`

- 头文件 `<string.h>`
- 功能：移动内存块<br/>

从source指向的位置复制num个字节的值到destination指向的内存块。复制操作的发生就好像使用了中间缓存，允许destination和source重叠。<br/>
对于这个函数，source和destination指向的对象的底层类型是无关的；结果是数据的一个二进制复制。
这个函数不检查任何结束空字符（null）—— 它总是准确地复制num个字节。
为了避免溢出，source和destination两个参数指向的数组的大小应该至少是num字节。<br/>
- 参数<br/>
 - destination<br/>
       指向内容被复制到的目的数组的指针，类型被转换为void*。
 - source<br/>
       指向复制数据的源数组的指针，类型被转换为void*。
 - num<br/>
       要复制的字节数。
 - 返回值<br/>
       返回目的指针destination。

---



### 6、memchr

`void * memchr ( const void * ptr, int value, size_t num );`

- 在内存块中定位字符
- 头文件：`<string.h> `
在ptr指向的没存块的前num个字节中搜索value值得第一次出现（被解释为一个unsigned char类型的值），并返回指向该值的指针。
- 参数
 - ptr<br/>
       指向需要被执行搜索的内存块的指针。
 - value<br/>
       需要被定位的值。这个值是作为int型传递的，但是该函数用这个值的unsigned char类型转换值来进行逐位的搜索。
 - num<br/>
       要是分析的字节数。
 - 返回值<br/>
       返回指向ptr指向的内存块中value值第一次出现位置的指针。
       如果没有找到value值，则该函数返回NULL。
- demo

```
/* memchr example */  
#include <stdio.h>  
#include <string.h>  

int main ()  
{  
    char * pch;  
    char str[] = "Example string";  
    pch = (char*) memchr (str, 'p', strlen(str));  
    if (pch!=NULL)  
        printf ("'p' found at position %d.\n", pch-str+1);  
    else  
        printf ("'p' not found.\n");  
    return 0;  
}  
```

```
//output
'p' found at position 5.
```

---

### 7、memcmp

`int memcmp ( const void * ptr1, const void * ptr2, size_t num );`

- 头文件：`<string.h>`
- 比较两个内存块
将ptr2指向的内存块的签num个字节与ptr2指向的内存块的前num个字节进行比较，如果它们都相符合则返回0，反之则返回一个指示其中一个较大的非零值。

- 参数
 - ptr1<br/>
       指向内存块的指针。
 - ptr2<br/>
       指向内存块的指针
 - num<br/>
       需要比较的字节数。

- 返回值<br/>
返回一个指示两个内存块的内容间的关系的整型值。0值表示两个内存块的内容是相等的。一个大于0的值表示，两个内存块中第一个不匹配的字节是ptr1的比ptr2的大，作为unsigned char类型比较的；小于0则表示相反。

- demo

```
/* memcmp example */  
#include <stdio.h>  
#include <string.h>  

int main ()  
{  
  char str1[256];  
  char str2[256];  
  int n;  
  printf ("Enter a sentence: "); gets(str1);  
  printf ("Enter another sentence: "); gets(str2);  
  n=memcmp ( str1, str2, 256 );  
  if (n>0) printf ("'%s' is greater than '%s'.\n",str1,str2);  
  else if (n<0) printf ("'%s' is less than '%s'.\n",str1,str2);  
  else printf ("'%s' is the same as '%s'.\n",str1,str2);  
  return 0;  
}  
```
```
//output
Enter a sentence: building  
Enter another sentence: book  
'building' is greater than 'book'.  
```

---
