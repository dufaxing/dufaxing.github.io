---
layout: post
title:  "希尔排序"
date:   2019-10-24 00:00:00
categories: 计算机基础
tags: C++
excerpt: 希尔排序算法原理
mathjax: true
---
* content
{:toc}
---


> [博客地址](https://dufaxing.com){:target="_blank"}


### 算法思想

&emsp;&emsp;希尔(Shell)排序又称为缩小增量排序，它是一种插入排序。它是直接插入排序算法的一种威力加强版。

&emsp;&emsp;希尔排序，也称递减增量排序算法，以其设计者希尔（Donald Shell）的名字命名，该算法由 1959 年公布。

&emsp;&emsp;我们举个例子来描述算法流程（以下摘自维基百科）：

&emsp;&emsp;假设有这样一组数 `{13, 14, 94, 33, 82, 25, 59, 94, 65, 23, 45, 27, 73, 25, 39, 10}`，如果我们以步长为 5 开始进行排序：


```
13 14 94 33 82
25 59 94 65 23
45 27 73 25 39
10
```

然后我们对每列进行排序：

```
10 14 73 25 23
13 27 94 33 39
25 59 94 65 82
45
```

将上述四行数字，依序接在一起时我们得到：{10, 14, 73, 25, 23, 13, 27, 94, 33, 39, 25, 59, 94, 65, 82, 45}，然后再以 3 为步长：


```
10 14 73
25 23 13
27 94 33
39 25 59
94 65 82
45
```

排序之后变为：

```
10 14 13
25 23 33
27 25 59
39 65 73
45 94 82
94
```

&emsp;&emsp;最后以 1 为步长进行排序（此时就是简单的插入排序了）。

&emsp;&emsp;可想而知，步长的选择是希尔排序的重要部分。算法最开始以一定的步长进行排序，然后会继续以更小的步长进行排序，最终算法以步长为 1 进行排序。当步长为 1 时，算法变为直接插入排序，这就保证了数据一定会被全部排序。


---

### 代码

- 以n/2作为步长为例。

```
#include <iostream>
#include <vector>

using namespace std;

vector<int> ShellSort(vector<int> list)
{
    vector<int> result = list;
    int n = result.size();
    for (int gap = n >> 1; gap > 0; gap >>= 1){
        for (int i = gap; i < n; i++){
            int temp = result[i];
            int j = i - gap;
            while (j >= 0 && result[j] > temp){
                result[j + gap] = result[j];
                j -= gap;
            }
            result[j + gap] = temp;
        }
        cout << "排序中："<< endl;
        for (int i = 0; i < result.size(); i++){
            cout << result[i] << " ";
        }
        cout << endl;
    }
    return result;
}

int main()
{
    int arr[] = { 6, 4, 8, 9, 2, 3, 1 };
    vector<int> test(arr, arr + sizeof(arr) / sizeof(arr[0]));
    cout << "排序前" << endl;
    for (int i = 0; i < test.size(); i++){
        cout << test[i] << " ";
    }
    cout << endl;
    vector<int> result;
    result = ShellSort(test);
    cout << "排序后" << endl;
    for (int i = 0; i < result.size(); i++){
        cout << result[i] << " ";
    }
    cout << endl;
    system("pause");
}
```

![KY8CJH.png](https://s2.ax1x.com/2019/10/23/KY8CJH.png)


---

### 算法分析


- 1、希尔排序的算法性能

![KY8KYQ.png](https://s2.ax1x.com/2019/10/23/KY8KYQ.png)

- 2、时间复杂度

&emsp;&emsp;步长的选择是希尔排序的重要部分，只要最终步长为1任何步长序列都可以工作。


&emsp;&emsp;算法最开始以一定的步长进行排序。然后会继续以一定步长进行排序，最终算法以步长为1进行排序。当步长为1时，算法变为插入排序，这就保证了数据一定会被排序。

&emsp;&emsp;步长序列的不同，会导致最坏的时间复杂度情况的不同。

&emsp;&emsp;本文中，以N/2为步长的最坏时间复杂度为N^2。

&emsp;&emsp;Donald Shell 最初建议步长选择为N/2并且对步长取半直到步长达到1。虽然这样取可以比O(N^2)类的算法（插入排序）更好，但这样仍然有减少平均时间和最差时间的余地。可能希尔排序最重要的地方在于当用较小步长排序后，以前用的较大步长仍然是有序的。比如，如果一个数列以步长5进行了排序然后再以步长3进行排序，那么该数列不仅是以步长3有序，而且是以步长5有序。如果不是这样，那么算法在迭代过程中会打乱以前的顺序，那就不会以如此短的时间完成排序了。

&emsp;&emsp;用这样步长序列的希尔排序比插入排序要快，甚至在小数组中比快速排序和堆排序还快，但是在涉及大量数据时希尔排序还是比快速排序慢。

- 3、算法稳定性

&emsp;&emsp;希尔排序中相等数据可能会交换位置，所以希尔排序是不稳定的算法。

- 4、直接插入排序和希尔排序的比较

&emsp;&emsp;直接插入排序是稳定的；而希尔排序是不稳定的。

&emsp;&emsp;直接插入排序更适合于原始记录基本有序的集合。

&emsp;&emsp;希尔排序的比较次数和移动次数都要比直接插入排序少，当N越大时，效果越明显。  

&emsp;&emsp;希尔排序的比较次数和移动次数都要比直接插入排序少，当N越大时，效果越明显。  

&emsp;&emsp;直接插入排序也适用于链式存储结构；希尔排序不适用于链式结构。


---
