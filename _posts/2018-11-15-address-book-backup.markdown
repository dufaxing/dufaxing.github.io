---
layout: post
title:  "Android调用CPP接口实现通讯录上传与备份"
date:   2018-11-15 00:00:00
categories: C++ Android sqlite
tags: C++ Android sqlite
excerpt: Android下的Java代码采用JNI调用CPP接口，上传通讯录至服务器
mathjax: true
---
* content
{:toc}
---


## 题目分析


> 完成手机通讯录备份，要求 <br/>
    - 1.实现可以将通讯录备份到预先设定的服务器数据库中。<br/>
    - 2.数据库使用SQLite.<br/>
    - 3.同时备份到TF卡。<br/>
    - 4.Android下通信部分用C++完成，界面用Java完成，之间采用JNI调用。<br/>
    - 5.需要有完整的设计文档(UML)<br/>
    
    
    
根据需求，我们需要完成两部分：<br/>
- Android下获取通讯录信息，传递给C++接口程序上传至服务器，同时保存至SD卡。<br/>
- 服务器下接受socket传来的通讯录信息，同时保存至本地数据库。<br/>


---

## Android端


### JNI

> JNI是Java Native Interface的缩写，它提供了若干的API实现了Java和其他语言的通信（主要是C&C++）。

- [Android Studio 3.0 JNI环境搭建教程](https://blog.csdn.net/ziyoutiankoong/article/details/79696279){:target="_blank"}


#### 新建一个JNITest的Java类


将Android获取的通讯录数据以指针数组的形式传递给C++接口程序。<br/>

```
package com.example.dufaxing.myapplication;



public class JNITest {
    static {
        System.loadLibrary("JniLib");
    }

    public native String getString();
    public native String upData(String[] arrData);
}
```


#### JNI生成头文件

```
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_example_dufaxing_myapplication_JNITest */

#ifndef _Included_com_example_dufaxing_myapplication_JNITest
#define _Included_com_example_dufaxing_myapplication_JNITest
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_dufaxing_myapplication_JNITest
 * Method:    getString
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_dufaxing_myapplication_JNITest_getString
  (JNIEnv *, jobject);

/*
 * Class:     com_example_dufaxing_myapplication_JNITest
 * Method:    upData
 * Signature: ([Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_dufaxing_myapplication_JNITest_upData
  (JNIEnv *, jobject, jobjectArray);

#ifdef __cplusplus
}
#endif
#endif
```



#### 定义C++功能函数


```
/* DO NOT EDIT THIS FILE - it is machine generated */

#include <stdio.h>
 #include <sys/types.h>
 #include <stdlib.h>
 #include <netinet/in.h>
 #include <errno.h>
 #include <string.h>
 #include <arpa/inet.h>
 #include <unistd.h>

#include<sys/socket.h>

#define MAXLINE 4096

#include <com_example_dufaxing_myapplication_JNITest.h>


/*
 * Class:     com_example_dufaxing_myapplication_JNITest
 * Method:    upData
 * Signature: ([Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_dufaxing_myapplication_JNITest_upData
  (JNIEnv * env, jobject, jobjectArray strArray) {

    /*将Java传递的jobjectArray通信录转化为 char* 数组 */
    jstring jstr;
    jsize len = (env)->GetArrayLength( strArray);
    char **pstr = (char **) malloc(len*sizeof(char *));

    /*绑定IP地址*/
    char servInetAddr[] = "104.129.182.145";
    //char servInetAddr[] = "127.0.0.1";
    struct sockaddr_in sockaddr;

    int socketfd;
    char recvline[MAXLINE], sendline[MAXLINE] ;//"dufaxing";

    memset(&sockaddr,0,sizeof(sockaddr));
    sockaddr.sin_family = AF_INET;
    /*绑定端口号*/
    sockaddr.sin_port = htons(6666);

    for (int i=0 ; i < len; i++) {
            jstr = (jstring)(env)->GetObjectArrayElement(strArray, i);
            pstr[i] = (char *)(env)->GetStringUTFChars(jstr, 0);

             if( (socketfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
                return (*env).NewStringUTF("create socket error");
             }
             if( inet_pton(AF_INET,servInetAddr, &sockaddr.sin_addr) <= 0) {
                 return (*env).NewStringUTF("inet_pton error");
             }
             if((connect(socketfd,(struct sockaddr*)&sockaddr,sizeof(sockaddr))) < 0 ) {
                return (*env).NewStringUTF("connect error");
             }
             if((send(socketfd,pstr[i],strlen(pstr[i]),0)) < 0) {
                return (*env).NewStringUTF("send mes error");
             }
            close(socketfd);
            sleep(1);
        }

    return (*env).NewStringUTF("上传成功");
}

```


### 保存至SD卡

#### SD卡权限

Android 6.0之后要获取读取SD卡的权限不仅要在AndroidManifest.xml文件加入：

```
<!--在SDCard中创建与删除文件权限  -->
    <uses-permission android:name="android.permission.MOUNT_UNMOUNT_FILESYSTEMS"/>
    <!-- 往SDCard写入数据权限 -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <!--  从SDCard读取数据权限 -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>

```

还需要加入动态申请权限

```
private static final int REQUEST_EXTERNAL_STORAGE = 1;
    private static String[] PERMISSIONS_STORAGE = {
            "android.permission.READ_EXTERNAL_STORAGE",
            "android.permission.WRITE_EXTERNAL_STORAGE"};


    public static void verifyStoragePermissions(Activity activity) {

        try {
            //检测是否有写的权限
            int permission = ActivityCompat.checkSelfPermission(activity,
                    "android.permission.WRITE_EXTERNAL_STORAGE");
            if (permission != PackageManager.PERMISSION_GRANTED) {
                // 没有写的权限，去申请写的权限，会弹出对话框
                ActivityCompat.requestPermissions(activity, PERMISSIONS_STORAGE, REQUEST_EXTERNAL_STORAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
```

将`verifyStoragePermissions(this);`权限申明在`onCreate`中。


#### 将通讯录写入TXT文件


```
// 向SD卡写入数据
    private void writeSDcard(String str) {
        try {
            // 判断是否存在SD卡
            if (Environment.getExternalStorageState().equals(
                    Environment.MEDIA_MOUNTED)) {
                // 获取SD卡的目录
                File sdDire = Environment.getExternalStorageDirectory();
                FileOutputStream outFileStream = new FileOutputStream(sdDire.getCanonicalPath() + "/test.txt");
                // FileOutputStream outFileStream = new FileOutputStream(Environment.getExternalStorageDirectory().toString() + "/test.txt");
                outFileStream.write(str.getBytes());
                outFileStream.close();
                Toast.makeText(this, "数据保存到text.txt文件了", Toast.LENGTH_LONG)
                        .show();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
```


---

## 服务器端







---
