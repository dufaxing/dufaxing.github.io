---
layout: post
title:  "STM32系统时钟时钟"
date:   2017-10-19 00:00:00
categories: 嵌入式
tags: STM
excerpt: STM32的时钟配置
mathjax: true
---
* content
{:toc}
---

在STM32中有5个时钟源： <br/>
①、HSI是高速内部时钟，RC震荡器，频率为 8MHz。 <br/>
②、HSE是高速外部时钟，可接石英/陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~16MHz。 <br/>
③、LSI是低速内部时钟，RC振荡器，频率为40kHz。 <br/>
④、LSE是低速外部时钟，接频率为32.768kHz的石英晶体。 <br/>
⑤、PLL为锁相环倍频输出，其时钟输入源可选择为HIS/2、HSE或HSE/2。倍频可选择为2~16倍，但其输出频率最大不得超过72MHz。 <br/>
系统时钟SYSCLK，它是供STM32中绝大部分器件工作的时钟源，系统时钟可选择为PLL输出、HSI或者HSE。系统时钟的做大频率为72MHz，它通过AHB分频器分频后送给个模块使用，AHB分频器可选择1、2、4、8、16、32、64、128、256、512分频。AHB分频器输出的时钟送给5大模块使用： <br/>
1.       送给AHB总线、内核、内存和DMA使用的HCLK时钟。 <br/>
2.       通过8分频后送给Cortex的系统定时器时钟。 <br/>
3.       直接送给Cortex的空闲运行时钟PCLK。 <br/>
4.       送给APB1分频器。APB1分频器可选择1、2、4、8、16分频，其输出一路供APB1外设使用（PCLK1，最大频率36MHz），另一路送给定时器（Timer）2、3、4倍频器使用。该倍频器可选择1或者2倍频，时钟输出供定时器2、3、4使用。 <br/>
5.       送给APB2分频器。APB2分频器可选择1、2、4、8、16分频，其输出一路供APB2外设使用(PCLK2，最大频率72MHz)，另一路送给定时器(Timer)1倍频器使用。该倍频器可选择1或者2倍频，时钟输出供定时器1使用。另外，APB2分频器还有一路输出供ADC分频器使用，分频后送给ADC模块使用。ADC分频器可选择为2、4、6、8分频。 <br/>
连接在APB1（低速外设）上的设备有：电源接口、备份接口、CAN、USB、I2C1、I2C2、UART2、UART3、SPI2、窗口看门狗、Timer2、Timer3、Timer4。
连接在APB2（高速外设）上的设备有：UART1、SPI1、Timer1、ADC1、ADC2、所有普通IO口、第二功能IO口。 <br/>

### PLLCLK作为系统时钟

HSI：内部高速时钟，频率为HSI RC的2分频。
PLL：锁相环.通过PLL倍频后，送入系统时钟。

```
VOID HwRcc_Hsi()
{
    g_stHwadpt.RccHse = FALSE;

    //设置系统时钟SYSCLK = PLL输出
    RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);

    RCC_PLLCmd(DISABLE);

    //PLL设置SYSCLK/2 * 6 = 8*3= 24MHz
    //STM32F10X中PLL锁相环作为系统 最大时钟为 （SYSCLK/2 * 9 ）= 36M
    RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMul_6);

    //设置系统时钟SYSCLK = PLL输出
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    //启动PLL
    RCC_PLLCmd(ENABLE);//如果PLL被用于系统时钟,不能被DISABLE
    //等待PLL稳定
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET){;}

    //等待PLL成功用作于系统时钟的时钟源,并等待稳定
    // 0x00:HSI作为系统时钟
    // 0x04:HSE作为系统时钟
    // 0x08:PLL作为系统时钟
    while(RCC_GetSYSCLKSource() != 0x08);

    return;
}
```

![](http://owlypioka.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20171019145631.png)

---

### 标题2:




---

### 标题3:


---
