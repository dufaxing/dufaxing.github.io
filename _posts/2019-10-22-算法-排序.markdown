---
layout: post
title:  "冒泡排序"
date:   2019-10-22 00:00:00
categories: 计算机基础
tags: C++
excerpt: 冒泡排序算法原理与优化
mathjax: true
---
* content
{:toc}
---


> [博客地址](https://dufaxing.com){:target="_blank"}


### 算法思想

冒泡排序是一种交换排序。<br>

它重复地走访要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<br>

这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端，故名冒泡排序。<br>

动态效果示意图：<br>


![KG3DqU.gif](https://s2.ax1x.com/2019/10/22/KG3DqU.gif)



---

### C++代码

```
#include <iostream>
#include <vector>

using namespace std;

vector<int> bubbleSort(vector<int> list){
    vector<int> result;
    if (list.empty()){
        return result;
    }

    result = list;
    int temp;
    // 要遍历的次数
    for (int i = 0; i < result.size() - 1; ++i){
        cout << "第" << i + 1 << "趟排序:" << endl;;
        // 从后向前依次的比较相邻两个数的大小
        for (int j = 0; j < result.size() - 1; j++){
            // 如果后面的元素小，则交换它们的位置
            if (result[j + 1] < result[j]){
                temp = result[j + 1];
                result[j + 1] = result[j];
                result[j] = temp;
            }
            cout << "排序中:";
            for (int s = 0; s < result.size(); s++){
                cout << result[s] << " ";
            }
            cout << endl;
        }
        cout << "排序结果:";
        for (int s = 0; s < result.size(); s++){
            cout << result[s] << " ";
        }
        cout << endl;
    }
    return result;
}

int main()
{
    int arr[] = { 6, 4, 8, 1, 2, 3, 9 };
    vector<int> test(arr, arr + sizeof(arr) / sizeof(arr[0]));
    cout << "排序前" << endl;
    for (int i = 0; i < test.size(); i++){
        cout << test[i] << " ";
    }
    cout << endl;
    vector<int> result;
    result = bubbleSort(test);
    cout << "排序后" << endl;
    for (int i = 0; i < result.size(); i++){
        cout << result[i] << " ";
    }
    cout << endl;
    system("pause");
}
```

![KG3qJA.png](https://s2.ax1x.com/2019/10/22/KG3qJA.png)

---

### 算法分析

- 1、冒泡排序算法的性能

![KG8nwF.png](https://s2.ax1x.com/2019/10/22/KG8nwF.png)

- 2、时间复杂度
若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：Cmin = N - 1, Mmin = 0。所以，冒泡排序最好时间复杂度为O(N)。

但是上述代码，不能扫描一趟就完成排序，它会进行全扫描。所以一个改进的方法就是，当冒泡中途发现已经为正序了，便无需继续比对下去。改进方法一会儿介绍。

若初始文件是反序的，需要进行 N -1 趟排序。每趟排序要进行 N - i 次关键字的比较(1 ≤ i ≤ N - 1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：

Cmax = N(N-1)/2 = O(N^2)

Mmax = 3N(N-1)/2 = O(N^2)

冒泡排序的最坏时间复杂度为O(N^2)。

因此，冒泡排序的平均时间复杂度为O(N^2)。

总结起来，其实就是一句话：当数据越接近正序时，冒泡排序性能越好。

- 3、算法稳定性
假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。

冒泡排序就是把小的元素往前调或者把大的元素往后调。是相邻的两个元素的比较，交换也发生在这两个元素之间。所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。

### 优化

对冒泡排序常见的改进方法是加入标志性变量exchange，用于标志某一趟排序过程中是否有数据交换。

如果进行某一趟排序时并没有进行数据交换，则说明所有数据已经有序，可立即结束排序，避免不必要的比较过程。

```
#include <iostream>
#include <vector>

using namespace std;

vector<int> bubbleSort(vector<int> list){
    vector<int> result;
    if (list.empty()){
        return result;
    }

    result = list;
    int temp;
    // 要遍历的次数
    for (int i = 0; i < result.size() - 1; ++i){
        cout << "第" << i + 1 << "趟排序:" << endl;;
        //交换标志位
        bool bChanged = false;
        // 从后向前依次的比较相邻两个数的大小
        for (int j = 0; j < result.size() - 1; j++){
            // 如果后面的元素小，则交换它们的位置
            if (result[j + 1] < result[j]){
                temp = result[j + 1];
                result[j + 1] = result[j];
                result[j] = temp;
                bChanged = true;
            }
            cout << "排序中:";
            for (int s = 0; s < result.size(); s++){
                cout << result[s] << " ";
            }
            cout << endl;
        }
        // 如果标志为false，说明本轮遍历没有交换，已经是有序数列，可以结束排序
        if (false == bChanged){
            break;
        }
        cout << "排序结果:";
        for (int s = 0; s < result.size(); s++){
            cout << result[s] << " ";
        }
        cout << endl;
    }

    return result;
}

int main()
{
    int arr[] = { 6, 4, 8, 1, 2, 3, 9 };
    vector<int> test(arr, arr + sizeof(arr) / sizeof(arr[0]));
    cout << "排序前" << endl;
    for (int i = 0; i < test.size(); i++){
        cout << test[i] << " ";
    }
    cout << endl;
    vector<int> result;
    result = bubbleSort(test);
    cout << "排序后" << endl;
    for (int i = 0; i < result.size(); i++){
        cout << result[i] << " ";
    }
    cout << endl;
    system("pause");
}
```


![KG8dFH.png](https://s2.ax1x.com/2019/10/22/KG8dFH.png)

---
