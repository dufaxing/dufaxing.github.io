---
layout: post
title:  "线程与进程基础"
date:   2019-3-20 00:00:00
categories: 计算机基础
tags: 读书笔记
excerpt: 《程序员自我修养--链接、装载与库》读书笔记
mathjax: true
---
* content
{:toc}
---


> 本篇主要摘自《程序员自我修养--链接、装载与库》第1.6节 *众人拾柴火焰高* 部分。


## 线程基础


- 线程（Thread），也称轻量级进程（Lightweight Process，LWP），是程序执行流的最小单元。一个标准线程由线程ID，当前指令指针（PC），寄存器集合和堆栈组成。<br/>
- 通常意义上，*一个进程由一个或多个线程组成*，各线程之间共享程序的内存空间（包括代码段、数据段、堆等）以及进程级的资源（如打开文件和信号）。<br/>

一个经典的线程与进程的关系如图所示

![AKCpD0.png](https://s2.ax1x.com/2019/03/20/AKCpD0.png)

---

### 线程的访问权限

线程的访问非常自由，它可以访问进程内存里的所有数据，甚至包括其他线程的堆栈（如果它知道其他的堆栈地址，那么就是很少见的情况），但实际运用中线程也拥有自己的私有存储空间，包括以下几个方面：<br/>

- 栈（尽管并非完全无法被其他线程访问，但一般情况下仍然可以认为是私有的数据）<br/>
- 线程局部存储（The Local Storage,TLS)。线程局部存储是某些操作系统为线程单独提供的私有空间，但通常只具有很有限的容量。<br/>
- 寄存器（包括PC寄存器），寄存器是执行流的基本数据，因此为线程私有。<br/>

从C程序员的角度来看，数据在线程之间是否私有如表所示：<br/>

线程私有|线程之间共享（进程所有）
|:----:    |:-------:                                    |
|局部变量  |全局变量                                     |
|函数的参数|堆数据                                       |
|TLS数据   |函数中的静态变量                             |
|          |程序代码，任何线程都有权利读取并执行任何代码 |
|          |打开的文件，A线程打开的文件，B线程可以读写   |
	
	
	




---

### 标题3:



---
